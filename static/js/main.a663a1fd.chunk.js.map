{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/cardlist-component.jsx","components/searchbox/searchbox-component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","console","log","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","searchField","fetch","then","response","json","users","setState","this","filteredMonsters","filter","toLowerCase","includes","event","target","value","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yTAGaA,EAAM,SAACC,GAAD,OACnB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,QACpB,kCAAKN,EAAMI,QAAQG,aCDVC,EAAU,SAACR,GAGpB,OAFAS,QAAQC,IAAIV,GAEL,qBAAKC,UAAU,YAAf,SAECD,EAAMW,SAASC,KAAI,SAAAR,GAAO,OACtB,cAAC,EAAD,CAAwBA,QAASA,GAArBA,EAAQC,UCTtBQ,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OAEtB,uBAAOd,UAAW,SACXe,KAAK,SACLF,YAAcA,EACdG,SAAUF,MCuCNG,G,wDAvCX,aAAe,IAAD,8BACV,gBACKC,MAAO,CACRR,SAAS,GACTS,YAAa,IAJP,E,qDAQd,WAAqB,IAAD,OACxBC,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,OACtBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAACf,SAAUc,Y,oBAI5C,WAAU,IAAD,OACL,EAA6BE,KAAKR,MAA3BR,EAAP,EAAOA,SAASS,EAAhB,EAAgBA,YACVQ,EAAmBjB,EAASkB,QAAQ,SAAAzB,GAAO,OAAIA,EAAQE,KAAKwB,cAAcC,SAASX,EAAYU,kBAErG,OACI,sBAAK7B,UAAU,MAAf,UACI,6CAEE,cAAC,EAAD,CACIa,YAAY,oBACZC,aAAc,SAAAiB,GAAK,OAAI,EAAKN,SAAS,CAACN,YAAaY,EAAMC,OAAOC,WAGtE,cAAC,EAAD,CAAUvB,SAAUiB,W,GA9BlBO,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a663a1fd.chunk.js","sourcesContent":["import React from \"react\";\nimport './card.styles.css';\n\nexport const Card =(props)=>(\n<div className='card-container'>\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\n    <h2> {props.monster.name}</h2>\n    <p> {props.monster.email}</p>\n</div>\n);","import React from \"react\";\n\nimport './card-list.styles.css';\nimport {Card} from \"../card/card.component\";\n\n\nexport const CardList =(props) =>{\n    console.log(props)\n\n    return <div className='card-list'>\n        {\n            props.monsters.map(monster => (\n                <Card key= {monster.id} monster={monster}/>))\n        }\n    </div>\n};\n\n","import React from \"react\";\nimport './searchbox.styles.css';\n\n export const SearchBox = ({placeholder, handleChange}) =>(\n\n    <input className= 'search'\n           type='search'\n           placeholder= {placeholder}\n           onChange={handleChange}\n           />\n\n)","// import logo from './logo.svg';\nimport React, {Component} from 'react'\nimport {CardList} from \"./components/cardlist/cardlist-component\";\nimport {SearchBox} from \"./components/searchbox/searchbox-component\";\nimport './App.css';\n\nclass App extends Component {\n\n    constructor() {\n        super();\n        this.state= {\n            monsters:[],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\nfetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json()\n        .then(users => this.setState({monsters: users})))\n\n    }\n\n    render() {\n        const {monsters,searchField}=this.state;\n        const filteredMonsters = monsters.filter( monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n        return (\n            <div className=\"App\">\n                <h1> Monsters!!</h1>\n\n                  <SearchBox\n                      placeholder='search a  monster'\n                      handleChange={event => this.setState({searchField: event.target.value})}\n\n                  />\n                <CardList monsters={filteredMonsters}/>\n\n            </div>\n        );\n    }\n\n\n\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}